<?php

/**
 * SendOauth2B Wrapper For Microsoft and Google OIDC/OAUTH2 For PHPMailer
 * PHP Version 5.5 and greater
 *
 * @category Class
 * @see      https://github.com/PHPMailer/PHPMailer/ The PHPMailer GitHub project
 * @author   Max Stewart (decomplexity) <SendOauth2@decomplexity.com>
 * @copyright  2021 Max Stewart
 * @license  MIT
 */
      namespace decomplexity\SendOauth2;

      use PHPMailer\PHPMailer\OAuth;

/**  if autoload fails to load the two class-files needed, load them with:
 
     require_once 'vendor/decomplexity/sendoauth2/src/SendOauth2C.php';
     require_once 'vendor/phpmailer/phpmailer/src/OAuth.php';
*/


/**
 * SendOauth2B Class Doc Comment
 * Provider factory class used by SendOauth2B and SendOauth2D
 * @category Class
 * @package  SendOauth2B
 * @author   Max Stewart (decomplexity) <SendOauth2@decomplexity.com>
 * @license  MIT
 * @note SendOauth2B provides website-wide settings for SendOauth2A
 * @note supports Oauth2 ('XOAUTH2'), Basic AUTH ('LOGIN') and other PHPMailer AUTHNs
 */

class SendOauth2B
{

    /**
    *
    * OAUTH2 WEBSITE-WIDE PARAMETERS
    *
    */

    /**
     * Email address of XOAUTH2 resource owner
     *
     * @var string
     */
    protected $username = '';

    /**
     * XOAUTH2 client ID generated by AAD registretion
     *
     * @var string
     */
    public $clientId = '';

    /**
     * XOAUTH2 client secret generated by AAD registretion
     *
     * @var string
     */
    public $clientSecret = '';

    /**
     * Needed for offline generation of the XOAUTH2 refresh token.
     * Should not be needed if the refresh token is an everlasting one
     *
     * @var string
     */
    protected $redirectURI = '';
	
	/**
	* for GSuite accounts only - used to restrict access to a specific domain
	* @var string
    */
	protected $hostedDomain;
	
    /**
     * XOAUTH2 refresh token generated offline by SendOauth2D
     *
     * @var string
     */
    public $refreshToken = '';


    /**
    *
    * BASIC AUTHENTICAION PARAMETERS
    *
    */

     /**
     * name prefix to sender address; set in Send_Outh2_D and used by default in SendOuth2A
     * if the caller of SendOauth2A does not specify a fromName
     *
     * @var string
     */
    protected $fromNameDefault = '';

    /**
     * sender email address. Normnally the service provider will mandate that
     * this is a primary address or alias registered as the email address.
     * It is the SMTP 'Userid' and also used for XOAUTH2 authentication
     *
     * @var string
     */
    public $mailSMTPAddress = '';


     /**
     * Basic AUTH password. Not used for Oauth2
     *
     * @var string
     */
    protected $SMTPPassword = '';


    /**
    * MISC
     */

    /**
     instantiation of PHPMailer
    */
    protected $mail;


     /**
     * instantiation of provider
     */
    protected $provider;

     /**
     * instantiation of Send_Oauth_C
     * @var object
     */
    protected $Send_Oauth_C_obj;


    /**
     * XOAUTH2 or LOGIN - returned to SendOauth2A
     *
     * @var string
     */
    protected $authTypeSetting = "";


    /**
     * Microsoft, Google or whatever
     *
     * @var string
     */
    protected $serviceProvider = "";

    /**
     * selects the AUTH type and parameters - from mainline module
     *
     * @var string
     */
    protected $mailAuthSet = "";

    /**
    filename prefix for the parameter file that is passed from running SendOauth2D
    */
    protected const OAUTH2_PARAMETERS_FILE = 'Oauth2parms';

    /**
    implode/explode array variables separator
    */
    protected const IMPLODE_GLUE = 'IMPLODE_GLUE';


    /**
     * __construct Method Doc Comment
     *
     * @category Method
     * @author     Max Stewart (decomplexity) <SendOauth2@decomplexity.com>
     */

    public function __construct($optionsB)
    {
        $this->mailAuthSet = $optionsB['mailAuthSet'];
        $this->mailSMTPAddress = $optionsB['mailSMTPAddress'];
        $this->mail = $optionsB['mail'];
    /**
      * SMTPAddress (below) is used by Oauth class as username and by BAuth and PHPMailer as Logon address
      */

        $optionsC = file_get_contents(self::OAUTH2_PARAMETERS_FILE . "_" . $this->mailAuthSet . ".txt");
      /**
      * If the contents of the file were encrtypted by SendOauth2D, decrypt it here.
      * Just decrypt $optionsC
      */

        $optionsC1 = explode(self::IMPLODE_GLUE, $optionsC);

     /**
    * optionsC1 now contains the following parms that were originally saved by Send_Oauth_D
    * note that implode and explode remove keys, so the order is important.
    * if any changes, cross-check with the list in Send_Auth2_D in method saveParameters
    */

        list(
        $this->clientId,
        $this->clientSecret,
        $this->redirectURI,
        $this->serviceProvider,
        $this->authTypeSetting,
        $this->fromNameDefault,
        $this->SMTPAddressDefault,
        $this->SMTPPassword,
        $this->hostedDomain,
        $this->refresh,
        $this->refreshToken,
        ) = $optionsC1;

        /**
       * to avoid using positional parameters, e.g. [0] for ease of maintenace use indexed parameters instead...
       * and for details of refresh, see Send_Oauth_C;
       */
        $optionsC2 = [
          'clientId' => $this->clientId,
          'clientSecret' => $this->clientSecret,
          'redirectURI' => $this->redirectURI,
          'serviceProvider' => $this->serviceProvider,
          'authTypeSetting' => $this->authTypeSetting,
		  'hostedDomain' => $this->hostedDomain,
		  'refresh' => false

          /**
          *
          * using  'accessType' = 'offline' and 'accessPrompt' = 'none'
          * should not be needed unless the refresh token is one that can expire
          */

          ];


        $this->Send_Oauth_C_obj = new SendOauth2C($optionsC2);

        $this->mail->Host = $this->getSMTPserver();
        $this->mail->AuthType = $this->authTypeSetting;        // usually XOAUTH2

      /**
      * mailSMTPAddress should normally NOT be set in global but allowed to take the SendOauth2 default,
      * unless pro tem you want to override the SendOauth2 default
      * Note that neither MSFT nor Google will will allow sending from 'arbitrary' addresses
      * NB: PHPMailer mail->Username is an SMTP ADDRESS
      */

        if (empty($this->mailSMTPAddress)) {
            $this->mailSMTPAddress = $this->SMTPAddressDefault;
        }
        $this->mail->Username = $this->mailSMTPAddress; // SMTP sender email address (MSFT or Google email account)

      /**
       * now Oauth2 authenticate, but only if XOAUTH2 !
       */

        if ($this->authTypeSetting == "XOAUTH2") {
            $this->mail->refresh_token = $this->refreshToken;
            $doit = $this->authenticate();
        } else {
      /**
        * Give PHPMailer the SMTP password only if AUTHN is either CRAM-MD5, LOGIN or PLAIN
        * Google's PLAIN-CLIENTTOKEN OAUTHBEARER and XOAUTH are unsupported
        */
            $this->mail->Password = $this->SMTPPassword;
        }

     /**
      * ends __construct
      */
    }



    protected function authenticate()
    {
           $this->provider = $this->getProvider();
           $this->mail->setOAuth(
               new OAuth(
                   [
                   'provider' => $this->provider,
                   'clientId' => $this->clientId,
                   'clientSecret' => $this->clientSecret,
                   'refreshToken' => $this->refreshToken,
                   'userName' => $this->mailSMTPAddress
                    ]
               )
           );

        /**
          * ends authenticate method
          */
    }



     /**
     * getProvider retrieves the provider-package name object (Azure, Google,...) from Send_Oauth_C
     */

    public function getProvider()
    {
        return $this->Send_Oauth_C_obj->setProvider();

    /**
    * ends getProvider method
    */
    }


     /**
     * getSMTPserver retrieves the server domain name from Send_Oauth_C
     * the server domain name cannot be assigned to $this->mail->Host there
     * as Send_Oauth_C is instantiated both from here AND from Send_Oauth_D
     * and Send_Oauth_D is independent of PHPMAiler and hence has no $mail object
     */

    public function getSMTPserver()
    {
        return $this->Send_Oauth_C_obj->setSMTPServer();

    /**
     * ends getsetSMTPServermethod
     */
    }


    /**
    * @return returns parameters and refresh token to SendOauth2A
    */
    public function getOauth2Settings()
    {
        return [
        'fromNameDefault' => $this->fromNameDefault,
        'mailSMTPAddress' => $this->mailSMTPAddress,
        ];

    /**
    * ends getOauth2Settings method
    */
    }

   /**
    * ends class SendOauth2B
    */
}
